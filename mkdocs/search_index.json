{
    "docs": [
        {
            "location": "/", 
            "text": "ParaView for High Energy Physics\n\n\nA guide for using ParaView in High Energy Physics", 
            "title": "Home"
        }, 
        {
            "location": "/#paraview-for-high-energy-physics", 
            "text": "A guide for using ParaView in High Energy Physics", 
            "title": "ParaView for High Energy Physics"
        }, 
        {
            "location": "/intro/whatsthis/", 
            "text": "What's all this?\n\n\n(Adam Lyon, October 2015)\n\n\nThe intention of this site/document it to kick-start use of ParaView in High Energy Physics. ParaView is not well known in the HEP community and much of the existing documentation, though very useful, is not geared for HEP use cases. I hope that others, with the help of information here, can get started in ParaView as quickly as possible. \n\n\nHow to contribute\n\n\nThis site/document is put together with the \nMkDocs\n system and written in \nMarkDown\n. MarkDown is a text based markup language that is heavily used and quite easy. \n\n\nI hope that others will contribute information that is relevant to the ParaView HEP community in this document. \n\n\nIf you want to contribute, look at the source in \nGitHub\n, especially under the \ndocs\n directory. If you have a Mac, the open-source \nMacDown\n program is especially nice for writing MarkDown (it shows you a continuously updated preview of your work). There is a newer program called \nMou\n that looks very nice. It is in beta and I think will cost money when they have a first release. I use \nMacDown\n. \n\n\nThe \nmkdocs.yml\n file describes the structure of the site/document. Feel free to add stuff where you see fit.\n\n\nIf you change a file or add a new one, I would appreciate it if you could add your name to the author list (usually at the top of the file or the main heading), add the date (month \n year are fine), and the version of ParaView or other programs that you are using. See examples throughout the documentation here.  \n\n\nReleasing your changes\n\n\nRight now I control the releases of this documentation and it lives under my github account. If it becomes more popular and there are others who want to manage it, I'd be happy to move it to a community site (maybe something under the HEP Software Foundation). But for now, you need to talk to me. \n\n\nYou have three options for making your changes available. \n\n\n\n\n\n\nOpen a \nNew Issue\n and attach the files you've changed. I will incorporate them.\n\n\n\n\n\n\nGain access to the Github repository and make the changes yourself. Open a \nNew Issue\n and ask that I add you to the list of contributors. \n\n\n\n\n\n\nDo it the \"Github way\", which is you fork the \nrepository\n, make your changes, and issue a pull request to me.\n\n\n\n\n\n\nOption 3 is the best. You don't need \nMkDocs\n to edit or add text, but it comes in handy if you want to preview your work (and you don't use something like \nMacDown\n). \n\n\nWatching for new updates\n\n\nYou can \"watch\" the \nrepository\n from your GitHub account. From your profile, you can specify how you want to be notified if there are updates.", 
            "title": "What is this document"
        }, 
        {
            "location": "/intro/whatsthis/#whats-all-this", 
            "text": "(Adam Lyon, October 2015)  The intention of this site/document it to kick-start use of ParaView in High Energy Physics. ParaView is not well known in the HEP community and much of the existing documentation, though very useful, is not geared for HEP use cases. I hope that others, with the help of information here, can get started in ParaView as quickly as possible.", 
            "title": "What's all this?"
        }, 
        {
            "location": "/intro/whatsthis/#how-to-contribute", 
            "text": "This site/document is put together with the  MkDocs  system and written in  MarkDown . MarkDown is a text based markup language that is heavily used and quite easy.   I hope that others will contribute information that is relevant to the ParaView HEP community in this document.   If you want to contribute, look at the source in  GitHub , especially under the  docs  directory. If you have a Mac, the open-source  MacDown  program is especially nice for writing MarkDown (it shows you a continuously updated preview of your work). There is a newer program called  Mou  that looks very nice. It is in beta and I think will cost money when they have a first release. I use  MacDown .   The  mkdocs.yml  file describes the structure of the site/document. Feel free to add stuff where you see fit.  If you change a file or add a new one, I would appreciate it if you could add your name to the author list (usually at the top of the file or the main heading), add the date (month   year are fine), and the version of ParaView or other programs that you are using. See examples throughout the documentation here.    Releasing your changes  Right now I control the releases of this documentation and it lives under my github account. If it becomes more popular and there are others who want to manage it, I'd be happy to move it to a community site (maybe something under the HEP Software Foundation). But for now, you need to talk to me.   You have three options for making your changes available.     Open a  New Issue  and attach the files you've changed. I will incorporate them.    Gain access to the Github repository and make the changes yourself. Open a  New Issue  and ask that I add you to the list of contributors.     Do it the \"Github way\", which is you fork the  repository , make your changes, and issue a pull request to me.    Option 3 is the best. You don't need  MkDocs  to edit or add text, but it comes in handy if you want to preview your work (and you don't use something like  MacDown ).   Watching for new updates  You can \"watch\" the  repository  from your GitHub account. From your profile, you can specify how you want to be notified if there are updates.", 
            "title": "How to contribute"
        }, 
        {
            "location": "/intro/intro/", 
            "text": "What is ParaView?\n\n\n(Adam Lyon, October 2015, ParaView 4.4)\n\n\nParaView\n is a 3D visualization application based on the \nVTK\n (Visualization Toolkit) library. To me, its important features are:\n\n\n\n\nBased on experience and research from the Computer Science Visualization community and the Supercomputing community.\n\n\nExtremely responsive scene manipulation (rotate, pan, zoom). \n\n\nVery easy to overlay data from multiple sources (and apply transformations if necessary). \n\n\nMany tools for visualization of scalar and vector fields (using, among other techniques, arrow glyphs, streamlines, heat maps, volume rendering).\n\n\nEasy slicing, cutting, and applying thresholds.\n\n\nAnimation.\n\n\n2D plots made from aspects of the 3D data.\n\n\nDeep python integration, including writing your own pipeline sources and filters as well as scripting the application.\n\n\n\n\nParaView is mainly authored and maintained by \nKitware\n, a company committed to open source platforms. \n\n\nObtaining ParaView\n\n\nParaView is available on the Mac, Windows and Linux platforms. The download page is at \nhttp://www.paraview.org/download/\n. ParaView should work out of the box without having to install any dependencies. If you really need to, you can do ParaView from source as described \nhere\n.\n\n\nLearning ParaView\n\n\nParaView is a very capable and somewhat complicated application with a learning curve. There are, however, many resources for learning the system. \n\n\nManual\n\n\nThe most important documentation from Kitware is the ParaView Guide in PDF or print form. The guide is the main manual for ParaView. A free community edition is available from \nhttp://www.paraview.org/paraview-guide/\n. There is also a print version that contains several more examples and use cases (the Fermilab library has a \ncopy\n). Certainly you should download and skim the manual, but it may be easier to start learning from a tutorial. \n\n\nTutorials\n\n\nKitware has an official tutorial at \nhttp://www.paraview.org/Wiki/The_ParaView_Tutorial\n. PDF of the tutorial document and links to the necessary data files are on that page. This tutorial is quite well written and extensive. It is a good place to start.\n\n\nKitware has a wealth of information on its \nWiki\n, about both \nParaView\n and \nVTK\n.\n\n\nAn excellent tutorial explaining how to handle scalar and vector fields in the context of climate science is at \nhttps://www.dkrz.de/Nutzerportal-en/doku/vis/sw/paraview\n. Download the PDF and the data needed for the tutorial. The web site can be quite slow and the data download is very large. If you have trouble downloading the materials, let Adam know and he can send you his copy. \n\n\nA more simple tutorial is from Boston University at \nhttp://www.bu.edu/tech/support/research/training-consulting/online-tutorials/paraview/\n. It is based on a rather old version of ParaView, but it is still relevant. They also have a tutorial on VTK itself \n\n\nA good university course with a wealth of online material is at \nhttp://cs.unc.edu/~taylorr/Comp715/\n. Of special interest are a \ntutorial on animation\n and a course \nschedule\n that contains many links to resources explaining visualization concepts. \n\n\nA nice overview of how Python is integrated with ParaView and VTK is at \nhttps://github.com/scipy-conference/scipy_proceedings_2015/blob/master/papers/cory_quammen/cory_quammen.rst\n.\n\n\nThe US Department of Defense has a large amount of information at \nhttp://daac.hpc.mil/software/ParaView/\n. \n\n\nFinally, the visualization group at the Argonne Leadership Computing Facility has a very good tutorial at \nhttps://www.alcf.anl.gov/user-guides/vis-paraview-red-blood-cell-tutorial\n creating a complicated pipeline in ParaView.", 
            "title": "What is ParaView"
        }, 
        {
            "location": "/intro/intro/#what-is-paraview", 
            "text": "(Adam Lyon, October 2015, ParaView 4.4)  ParaView  is a 3D visualization application based on the  VTK  (Visualization Toolkit) library. To me, its important features are:   Based on experience and research from the Computer Science Visualization community and the Supercomputing community.  Extremely responsive scene manipulation (rotate, pan, zoom).   Very easy to overlay data from multiple sources (and apply transformations if necessary).   Many tools for visualization of scalar and vector fields (using, among other techniques, arrow glyphs, streamlines, heat maps, volume rendering).  Easy slicing, cutting, and applying thresholds.  Animation.  2D plots made from aspects of the 3D data.  Deep python integration, including writing your own pipeline sources and filters as well as scripting the application.   ParaView is mainly authored and maintained by  Kitware , a company committed to open source platforms.", 
            "title": "What is ParaView?"
        }, 
        {
            "location": "/intro/intro/#obtaining-paraview", 
            "text": "ParaView is available on the Mac, Windows and Linux platforms. The download page is at  http://www.paraview.org/download/ . ParaView should work out of the box without having to install any dependencies. If you really need to, you can do ParaView from source as described  here .", 
            "title": "Obtaining ParaView"
        }, 
        {
            "location": "/intro/intro/#learning-paraview", 
            "text": "ParaView is a very capable and somewhat complicated application with a learning curve. There are, however, many resources for learning the system.", 
            "title": "Learning ParaView"
        }, 
        {
            "location": "/intro/intro/#manual", 
            "text": "The most important documentation from Kitware is the ParaView Guide in PDF or print form. The guide is the main manual for ParaView. A free community edition is available from  http://www.paraview.org/paraview-guide/ . There is also a print version that contains several more examples and use cases (the Fermilab library has a  copy ). Certainly you should download and skim the manual, but it may be easier to start learning from a tutorial.", 
            "title": "Manual"
        }, 
        {
            "location": "/intro/intro/#tutorials", 
            "text": "Kitware has an official tutorial at  http://www.paraview.org/Wiki/The_ParaView_Tutorial . PDF of the tutorial document and links to the necessary data files are on that page. This tutorial is quite well written and extensive. It is a good place to start.  Kitware has a wealth of information on its  Wiki , about both  ParaView  and  VTK .  An excellent tutorial explaining how to handle scalar and vector fields in the context of climate science is at  https://www.dkrz.de/Nutzerportal-en/doku/vis/sw/paraview . Download the PDF and the data needed for the tutorial. The web site can be quite slow and the data download is very large. If you have trouble downloading the materials, let Adam know and he can send you his copy.   A more simple tutorial is from Boston University at  http://www.bu.edu/tech/support/research/training-consulting/online-tutorials/paraview/ . It is based on a rather old version of ParaView, but it is still relevant. They also have a tutorial on VTK itself   A good university course with a wealth of online material is at  http://cs.unc.edu/~taylorr/Comp715/ . Of special interest are a  tutorial on animation  and a course  schedule  that contains many links to resources explaining visualization concepts.   A nice overview of how Python is integrated with ParaView and VTK is at  https://github.com/scipy-conference/scipy_proceedings_2015/blob/master/papers/cory_quammen/cory_quammen.rst .  The US Department of Defense has a large amount of information at  http://daac.hpc.mil/software/ParaView/ .   Finally, the visualization group at the Argonne Leadership Computing Facility has a very good tutorial at  https://www.alcf.anl.gov/user-guides/vis-paraview-red-blood-cell-tutorial  creating a complicated pipeline in ParaView.", 
            "title": "Tutorials"
        }, 
        {
            "location": "/misc/buildv5/", 
            "text": "Building from source\n\n\n(Adam Lyon, December 2015, ParaView 5)\n\n\nTHIS PAGE IS IN PROGRESS - DO NOT FOLLOW\n\n\nWhile binaries of the ParaView application are available at \nhttp://www.paraview.org\n, you may find that you need to build ParaView from source yourself. A build from source will be required if you want to have a special non-default build option turned on or off, build against a different Open MPI library, or want the latest changes in ParaView from git. Otherwise, you should definitely use the pre-compiled binaries as described in \nObtaining ParaView\n.\n\n\nNote\n\n\nThe instructions here are to build ParaView 4.4. This version is no longer the latest and so we'll explicitly check out version 4.4 below. To build ParaView v5, see \nBuildV5\n.\n\n\nObtaining ParaView Source\n\n\nSee \nhttps://gitlab.kitware.com/paraview/paraview/blob/master/Documentation/dev/git/download.md\n for information on how to \ngit clone\n the ParaView repository. A summary is,\n\n\ncd /path/to/development/paraview\ngit clone --recursive https://gitlab.kitware.com/paraview/paraview.git ParaView\ncd ParaView\ngit checkout v4.4.0\ngit submodule update --init\n# Your source code will be in /path/to/development/paraview/ParaView\n\n\n\n\nIf you need to update the repository (e.g. pull), then do\n\n\ncd /path/to/development/paraview/ParaView\ngit pull\ngit submodule update --init\n\n\n\n\nInstalling Qt\n\n\nYou need to install Qt v4 (4.7.0 or later, but not v5) on your system. See \nhttp://download.qt.io/archive/qt/4.8/4.8.6/\n. ParaView will be able to find it. \n\n\nBuilding MPI\n\n\nYou will also need an installation of MPI. There are many MPI implementations. I typically use \nOpen MPI\n, see \nhttp://www.open-mpi.org/\n. If you are on a machine with infiniband interconnects, you may want to use the \nMPICH\n implementation. Here's how I download and build Open MPI (using openmpi-1.10.0) on my Mac.\n\n\ncd /path/to/development/paraview\ncurl -O http://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-1.10.0.tar.gz\ntar xvzf openmpi-1.10.0.tar.gz  # Makes openmpi-1.10.0 directory\ncd openmpi-1.10.0\n\n./configure --prefix=/path/to/development/paraview/openmpi\nmake install -j 4  # build with 4 cpus\n\n# Open MPI is installed in /path/to/development/paraview/openmpi\n\n\n\n\nRemember the location of the installation directory. You will need it if you ever run \nmpiexec\n or similar. \n\n\nDownloading and building cmake\n\n\nYou need a late verison of \ncmake\n to build ParaView. See \nhttps://cmake.org/download/\n to download it (note that \ncmake\n is written by Kitware too!). Download the file appropriate for your platform. For example, on my Mac I do,\n\n\ncd /path/to/development/paraview\ncurl -O https://cmake.org/files/v3.4/cmake-3.4.0-rc1-Darwin-x86_64.tar.gz\ntar xvzf cmake-3.4.0-rc1-Darwin-x86_64.tar.gov\n\n\n\n\nFor the Mac, this tar file has the necessary binary. For another platform, you may need to build form source. See the \ncmake\n instructions. \n\n\nBuilding ParaView\n\n\nWe should now have the necessary pieces to build ParaView. Note that if you want to make animation files directly in ParaView, you need to have \nffmpeg\n installed in your system. You should probably have \nffmpeg\n installed anyway, because the movie files produced by ParaView may need re-encoding to display properly in HTML5 or your on iPad. \n\n\ncmake\n likes \"out of source\" builds, so we make a build directory.\n\n\ncd /path/to/development/paraview\nmkdir build\ncd build\n\n\n\n\nNow we run \ncmake\n with necessary options. If you are building on Linux, then the \ncmake\n path in the example below will be different. It is handy to set an environment variable with the location of your built MPI libraries. Note that if you used an MPI implementation other than \nOpen MPI\n, then the library names may be different (e.g. \nmpi_cxx\n may be \nmpicxx\n). Also, on Linux change \n.dylib\n to \n.so\n. Lastly, I build using my Mac's system \npython\n. \n\n\nIf you are on  Mac, the application will eventually (after \nmake install\n) be installed in \n/Applications/paraview.app\n (it will not work if installed elsewhere). On Linux, the default installation will be \n/usr/local\n. To change that, below set \n-DCMAKE_INSTALL_PREFIX=/path/to/paraview\n. \n\n\n# In the build directory\nexport MYBASE=/path/to/development/paraview # Replace with your location\nexport MYMPI=$MYBASE/openmpi  # Replace with your MPI installation directory \n\n../cmake-3.4.0-rc1-Darwin-x86_64/CMake.app/Contents/bin/cmake \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DBUILD_TESTING=OFF \\\n    -DPARAVIEW_USE_MPI=ON \\\n    -DMPI_C_LIBRARIES=\n$MYMPI/lib/libmpi.dylib;$MYMPI/lib/libmpi_cxx.dylib\n \\\n    -DMPI_C_INCLUDE_PATH=\n$MYMPI/include\n \\\n    -DMPI_CXX_INCLUDE_PATH=\n$MYMPI/include\n \\\n    -DMPI_C_COMPILER=\n$MYMPI/bin/mpicc\n \\\n    -DMPI_CXX_COMPILER=\n$MYMPI/bin/mpicxx\n \\\n    -DMPIEXEC=\n$MYMPI/bin/mpiexec\n \\\n    -DPARAVIEW_BUILD_PLUGIN_GMVReader=OFF \\\n    -DPARAVIEW_BUILD_PLUGIN_ForceTime=ON \\\n    -DPARAVIEW_BUILD_PLUGIN_TemporalParallelismScriptGenerator=ON \\\n    -DPARAVIEW_BUILD_CATALYST_ADAPTORS=ON \\\n    -DPARAVIEW_ENABLE_PYTHON=ON \\\n    -DPYTHON_INCLUDE_DIR=/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 \\\n    -DPYTHON_EXECUTABLE=/usr/bin/python \\\n    ../ParaView/\n\n\n\n\nIf you wanted to build so that ParaView uses OpenGL2 (faster, but buggy), then add \n-DVTK_RENDERING_BACKEND=OpenGL2 \\\n. \n\n\nNote that \n-DBUILD_TESTING\n is set to \nOFF\n. Turning it on will cause the build to download a large number of small files from Kitware. Turning it off makes the build much faster and you can build without a network connection.\n\n\nNow build and install,\n\n\nmake -j 4\nmake install\n\n\n\n\nAnd it's done.", 
            "title": "Building ParaView v5 from source"
        }, 
        {
            "location": "/misc/buildv5/#building-from-source", 
            "text": "(Adam Lyon, December 2015, ParaView 5)  THIS PAGE IS IN PROGRESS - DO NOT FOLLOW  While binaries of the ParaView application are available at  http://www.paraview.org , you may find that you need to build ParaView from source yourself. A build from source will be required if you want to have a special non-default build option turned on or off, build against a different Open MPI library, or want the latest changes in ParaView from git. Otherwise, you should definitely use the pre-compiled binaries as described in  Obtaining ParaView .", 
            "title": "Building from source"
        }, 
        {
            "location": "/misc/buildv5/#note", 
            "text": "The instructions here are to build ParaView 4.4. This version is no longer the latest and so we'll explicitly check out version 4.4 below. To build ParaView v5, see  BuildV5 .", 
            "title": "Note"
        }, 
        {
            "location": "/misc/buildv5/#obtaining-paraview-source", 
            "text": "See  https://gitlab.kitware.com/paraview/paraview/blob/master/Documentation/dev/git/download.md  for information on how to  git clone  the ParaView repository. A summary is,  cd /path/to/development/paraview\ngit clone --recursive https://gitlab.kitware.com/paraview/paraview.git ParaView\ncd ParaView\ngit checkout v4.4.0\ngit submodule update --init\n# Your source code will be in /path/to/development/paraview/ParaView  If you need to update the repository (e.g. pull), then do  cd /path/to/development/paraview/ParaView\ngit pull\ngit submodule update --init", 
            "title": "Obtaining ParaView Source"
        }, 
        {
            "location": "/misc/buildv5/#installing-qt", 
            "text": "You need to install Qt v4 (4.7.0 or later, but not v5) on your system. See  http://download.qt.io/archive/qt/4.8/4.8.6/ . ParaView will be able to find it.", 
            "title": "Installing Qt"
        }, 
        {
            "location": "/misc/buildv5/#building-mpi", 
            "text": "You will also need an installation of MPI. There are many MPI implementations. I typically use  Open MPI , see  http://www.open-mpi.org/ . If you are on a machine with infiniband interconnects, you may want to use the  MPICH  implementation. Here's how I download and build Open MPI (using openmpi-1.10.0) on my Mac.  cd /path/to/development/paraview\ncurl -O http://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-1.10.0.tar.gz\ntar xvzf openmpi-1.10.0.tar.gz  # Makes openmpi-1.10.0 directory\ncd openmpi-1.10.0\n\n./configure --prefix=/path/to/development/paraview/openmpi\nmake install -j 4  # build with 4 cpus\n\n# Open MPI is installed in /path/to/development/paraview/openmpi  Remember the location of the installation directory. You will need it if you ever run  mpiexec  or similar.", 
            "title": "Building MPI"
        }, 
        {
            "location": "/misc/buildv5/#downloading-and-building-cmake", 
            "text": "You need a late verison of  cmake  to build ParaView. See  https://cmake.org/download/  to download it (note that  cmake  is written by Kitware too!). Download the file appropriate for your platform. For example, on my Mac I do,  cd /path/to/development/paraview\ncurl -O https://cmake.org/files/v3.4/cmake-3.4.0-rc1-Darwin-x86_64.tar.gz\ntar xvzf cmake-3.4.0-rc1-Darwin-x86_64.tar.gov  For the Mac, this tar file has the necessary binary. For another platform, you may need to build form source. See the  cmake  instructions.", 
            "title": "Downloading and building cmake"
        }, 
        {
            "location": "/misc/buildv5/#building-paraview", 
            "text": "We should now have the necessary pieces to build ParaView. Note that if you want to make animation files directly in ParaView, you need to have  ffmpeg  installed in your system. You should probably have  ffmpeg  installed anyway, because the movie files produced by ParaView may need re-encoding to display properly in HTML5 or your on iPad.   cmake  likes \"out of source\" builds, so we make a build directory.  cd /path/to/development/paraview\nmkdir build\ncd build  Now we run  cmake  with necessary options. If you are building on Linux, then the  cmake  path in the example below will be different. It is handy to set an environment variable with the location of your built MPI libraries. Note that if you used an MPI implementation other than  Open MPI , then the library names may be different (e.g.  mpi_cxx  may be  mpicxx ). Also, on Linux change  .dylib  to  .so . Lastly, I build using my Mac's system  python .   If you are on  Mac, the application will eventually (after  make install ) be installed in  /Applications/paraview.app  (it will not work if installed elsewhere). On Linux, the default installation will be  /usr/local . To change that, below set  -DCMAKE_INSTALL_PREFIX=/path/to/paraview .   # In the build directory\nexport MYBASE=/path/to/development/paraview # Replace with your location\nexport MYMPI=$MYBASE/openmpi  # Replace with your MPI installation directory \n\n../cmake-3.4.0-rc1-Darwin-x86_64/CMake.app/Contents/bin/cmake \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DBUILD_TESTING=OFF \\\n    -DPARAVIEW_USE_MPI=ON \\\n    -DMPI_C_LIBRARIES= $MYMPI/lib/libmpi.dylib;$MYMPI/lib/libmpi_cxx.dylib  \\\n    -DMPI_C_INCLUDE_PATH= $MYMPI/include  \\\n    -DMPI_CXX_INCLUDE_PATH= $MYMPI/include  \\\n    -DMPI_C_COMPILER= $MYMPI/bin/mpicc  \\\n    -DMPI_CXX_COMPILER= $MYMPI/bin/mpicxx  \\\n    -DMPIEXEC= $MYMPI/bin/mpiexec  \\\n    -DPARAVIEW_BUILD_PLUGIN_GMVReader=OFF \\\n    -DPARAVIEW_BUILD_PLUGIN_ForceTime=ON \\\n    -DPARAVIEW_BUILD_PLUGIN_TemporalParallelismScriptGenerator=ON \\\n    -DPARAVIEW_BUILD_CATALYST_ADAPTORS=ON \\\n    -DPARAVIEW_ENABLE_PYTHON=ON \\\n    -DPYTHON_INCLUDE_DIR=/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 \\\n    -DPYTHON_EXECUTABLE=/usr/bin/python \\\n    ../ParaView/  If you wanted to build so that ParaView uses OpenGL2 (faster, but buggy), then add  -DVTK_RENDERING_BACKEND=OpenGL2 \\ .   Note that  -DBUILD_TESTING  is set to  OFF . Turning it on will cause the build to download a large number of small files from Kitware. Turning it off makes the build much faster and you can build without a network connection.  Now build and install,  make -j 4\nmake install  And it's done.", 
            "title": "Building ParaView"
        }, 
        {
            "location": "/misc/buildv4/", 
            "text": "Building from source\n\n\n(Adam Lyon, October 2015, ParaView 4.4)\n\n\nWhile binaries of the ParaView application are available at \nhttp://www.paraview.org\n, you may find that you need to build ParaView from source yourself. A build from source will be required if you want to have a special non-default build option turned on or off, build against a different Open MPI library, or want the latest changes in ParaView from git. Otherwise, you should definitely use the pre-compiled binaries as described in \nObtaining ParaView\n.\n\n\nNote\n\n\nThe instructions here are to build ParaView 4.4. This version is no longer the latest and so we'll explicitly check out version 4.4 below. To build ParaView v5, see \nBuildV5\n.\n\n\nObtaining ParaView Source\n\n\nSee \nhttps://gitlab.kitware.com/paraview/paraview/blob/master/Documentation/dev/git/download.md\n for information on how to \ngit clone\n the ParaView repository. A summary is,\n\n\ncd /path/to/development/paraview\ngit clone --recursive https://gitlab.kitware.com/paraview/paraview.git ParaView\ncd ParaView\ngit checkout v4.4.0\ngit submodule update --init\n# Your source code will be in /path/to/development/paraview/ParaView\n\n\n\n\nIf you need to update the repository (e.g. pull), then do\n\n\ncd /path/to/development/paraview/ParaView\ngit pull\ngit submodule update --init\n\n\n\n\nInstalling Qt\n\n\nYou need to install Qt v4 (4.7.0 or later, but not v5) on your system. See \nhttp://download.qt.io/archive/qt/4.8/4.8.6/\n. ParaView will be able to find it. \n\n\nBuilding MPI\n\n\nYou will also need an installation of MPI. There are many MPI implementations. I typically use \nOpen MPI\n, see \nhttp://www.open-mpi.org/\n. If you are on a machine with infiniband interconnects, you may want to use the \nMPICH\n implementation. Here's how I download and build Open MPI (using openmpi-1.10.0) on my Mac.\n\n\ncd /path/to/development/paraview\ncurl -O http://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-1.10.0.tar.gz\ntar xvzf openmpi-1.10.0.tar.gz  # Makes openmpi-1.10.0 directory\ncd openmpi-1.10.0\n\n./configure --prefix=/path/to/development/paraview/openmpi\nmake install -j 4  # build with 4 cpus\n\n# Open MPI is installed in /path/to/development/paraview/openmpi\n\n\n\n\nRemember the location of the installation directory. You will need it if you ever run \nmpiexec\n or similar. \n\n\nDownloading and building cmake\n\n\nYou need a late verison of \ncmake\n to build ParaView. See \nhttps://cmake.org/download/\n to download it (note that \ncmake\n is written by Kitware too!). Download the file appropriate for your platform. For example, on my Mac I do,\n\n\ncd /path/to/development/paraview\ncurl -O https://cmake.org/files/v3.4/cmake-3.4.0-rc1-Darwin-x86_64.tar.gz\ntar xvzf cmake-3.4.0-rc1-Darwin-x86_64.tar.gov\n\n\n\n\nFor the Mac, this tar file has the necessary binary. For another platform, you may need to build form source. See the \ncmake\n instructions. \n\n\nBuilding ParaView\n\n\nWe should now have the necessary pieces to build ParaView. Note that if you want to make animation files directly in ParaView, you need to have \nffmpeg\n installed in your system. You should probably have \nffmpeg\n installed anyway, because the movie files produced by ParaView may need re-encoding to display properly in HTML5 or your on iPad. \n\n\ncmake\n likes \"out of source\" builds, so we make a build directory.\n\n\ncd /path/to/development/paraview\nmkdir build\ncd build\n\n\n\n\nNow we run \ncmake\n with necessary options. If you are building on Linux, then the \ncmake\n path in the example below will be different. It is handy to set an environment variable with the location of your built MPI libraries. Note that if you used an MPI implementation other than \nOpen MPI\n, then the library names may be different (e.g. \nmpi_cxx\n may be \nmpicxx\n). Also, on Linux change \n.dylib\n to \n.so\n. Lastly, I build using my Mac's system \npython\n. \n\n\nIf you are on  Mac, the application will eventually (after \nmake install\n) be installed in \n/Applications/paraview.app\n (it will not work if installed elsewhere). On Linux, the default installation will be \n/usr/local\n. To change that, below set \n-DCMAKE_INSTALL_PREFIX=/path/to/paraview\n. \n\n\n# In the build directory\nexport MYBASE=/path/to/development/paraview # Replace with your location\nexport MYMPI=$MYBASE/openmpi  # Replace with your MPI installation directory \n\n../cmake-3.4.0-rc1-Darwin-x86_64/CMake.app/Contents/bin/cmake \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DBUILD_TESTING=OFF \\\n    -DPARAVIEW_USE_MPI=ON \\\n    -DMPI_C_LIBRARIES=\n$MYMPI/lib/libmpi.dylib;$MYMPI/lib/libmpi_cxx.dylib\n \\\n    -DMPI_C_INCLUDE_PATH=\n$MYMPI/include\n \\\n    -DMPI_CXX_INCLUDE_PATH=\n$MYMPI/include\n \\\n    -DMPI_C_COMPILER=\n$MYMPI/bin/mpicc\n \\\n    -DMPI_CXX_COMPILER=\n$MYMPI/bin/mpicxx\n \\\n    -DMPIEXEC=\n$MYMPI/bin/mpiexec\n \\\n    -DPARAVIEW_BUILD_PLUGIN_GMVReader=OFF \\\n    -DPARAVIEW_BUILD_PLUGIN_ForceTime=ON \\\n    -DPARAVIEW_BUILD_PLUGIN_TemporalParallelismScriptGenerator=ON \\\n    -DPARAVIEW_BUILD_CATALYST_ADAPTORS=ON \\\n    -DPARAVIEW_ENABLE_PYTHON=ON \\\n    -DPYTHON_INCLUDE_DIR=/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 \\\n    -DPYTHON_EXECUTABLE=/usr/bin/python \\\n    ../ParaView/\n\n\n\n\nIf you wanted to build so that ParaView uses OpenGL2 (faster, but buggy), then add \n-DVTK_RENDERING_BACKEND=OpenGL2 \\\n. \n\n\nNote that \n-DBUILD_TESTING\n is set to \nOFF\n. Turning it on will cause the build to download a large number of small files from Kitware. Turning it off makes the build much faster and you can build without a network connection.\n\n\nNow build and install,\n\n\nmake -j 4\nmake install\n\n\n\n\nAnd it's done.", 
            "title": "Building ParaView v4 from source"
        }, 
        {
            "location": "/misc/buildv4/#building-from-source", 
            "text": "(Adam Lyon, October 2015, ParaView 4.4)  While binaries of the ParaView application are available at  http://www.paraview.org , you may find that you need to build ParaView from source yourself. A build from source will be required if you want to have a special non-default build option turned on or off, build against a different Open MPI library, or want the latest changes in ParaView from git. Otherwise, you should definitely use the pre-compiled binaries as described in  Obtaining ParaView .", 
            "title": "Building from source"
        }, 
        {
            "location": "/misc/buildv4/#note", 
            "text": "The instructions here are to build ParaView 4.4. This version is no longer the latest and so we'll explicitly check out version 4.4 below. To build ParaView v5, see  BuildV5 .", 
            "title": "Note"
        }, 
        {
            "location": "/misc/buildv4/#obtaining-paraview-source", 
            "text": "See  https://gitlab.kitware.com/paraview/paraview/blob/master/Documentation/dev/git/download.md  for information on how to  git clone  the ParaView repository. A summary is,  cd /path/to/development/paraview\ngit clone --recursive https://gitlab.kitware.com/paraview/paraview.git ParaView\ncd ParaView\ngit checkout v4.4.0\ngit submodule update --init\n# Your source code will be in /path/to/development/paraview/ParaView  If you need to update the repository (e.g. pull), then do  cd /path/to/development/paraview/ParaView\ngit pull\ngit submodule update --init", 
            "title": "Obtaining ParaView Source"
        }, 
        {
            "location": "/misc/buildv4/#installing-qt", 
            "text": "You need to install Qt v4 (4.7.0 or later, but not v5) on your system. See  http://download.qt.io/archive/qt/4.8/4.8.6/ . ParaView will be able to find it.", 
            "title": "Installing Qt"
        }, 
        {
            "location": "/misc/buildv4/#building-mpi", 
            "text": "You will also need an installation of MPI. There are many MPI implementations. I typically use  Open MPI , see  http://www.open-mpi.org/ . If you are on a machine with infiniband interconnects, you may want to use the  MPICH  implementation. Here's how I download and build Open MPI (using openmpi-1.10.0) on my Mac.  cd /path/to/development/paraview\ncurl -O http://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-1.10.0.tar.gz\ntar xvzf openmpi-1.10.0.tar.gz  # Makes openmpi-1.10.0 directory\ncd openmpi-1.10.0\n\n./configure --prefix=/path/to/development/paraview/openmpi\nmake install -j 4  # build with 4 cpus\n\n# Open MPI is installed in /path/to/development/paraview/openmpi  Remember the location of the installation directory. You will need it if you ever run  mpiexec  or similar.", 
            "title": "Building MPI"
        }, 
        {
            "location": "/misc/buildv4/#downloading-and-building-cmake", 
            "text": "You need a late verison of  cmake  to build ParaView. See  https://cmake.org/download/  to download it (note that  cmake  is written by Kitware too!). Download the file appropriate for your platform. For example, on my Mac I do,  cd /path/to/development/paraview\ncurl -O https://cmake.org/files/v3.4/cmake-3.4.0-rc1-Darwin-x86_64.tar.gz\ntar xvzf cmake-3.4.0-rc1-Darwin-x86_64.tar.gov  For the Mac, this tar file has the necessary binary. For another platform, you may need to build form source. See the  cmake  instructions.", 
            "title": "Downloading and building cmake"
        }, 
        {
            "location": "/misc/buildv4/#building-paraview", 
            "text": "We should now have the necessary pieces to build ParaView. Note that if you want to make animation files directly in ParaView, you need to have  ffmpeg  installed in your system. You should probably have  ffmpeg  installed anyway, because the movie files produced by ParaView may need re-encoding to display properly in HTML5 or your on iPad.   cmake  likes \"out of source\" builds, so we make a build directory.  cd /path/to/development/paraview\nmkdir build\ncd build  Now we run  cmake  with necessary options. If you are building on Linux, then the  cmake  path in the example below will be different. It is handy to set an environment variable with the location of your built MPI libraries. Note that if you used an MPI implementation other than  Open MPI , then the library names may be different (e.g.  mpi_cxx  may be  mpicxx ). Also, on Linux change  .dylib  to  .so . Lastly, I build using my Mac's system  python .   If you are on  Mac, the application will eventually (after  make install ) be installed in  /Applications/paraview.app  (it will not work if installed elsewhere). On Linux, the default installation will be  /usr/local . To change that, below set  -DCMAKE_INSTALL_PREFIX=/path/to/paraview .   # In the build directory\nexport MYBASE=/path/to/development/paraview # Replace with your location\nexport MYMPI=$MYBASE/openmpi  # Replace with your MPI installation directory \n\n../cmake-3.4.0-rc1-Darwin-x86_64/CMake.app/Contents/bin/cmake \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DBUILD_TESTING=OFF \\\n    -DPARAVIEW_USE_MPI=ON \\\n    -DMPI_C_LIBRARIES= $MYMPI/lib/libmpi.dylib;$MYMPI/lib/libmpi_cxx.dylib  \\\n    -DMPI_C_INCLUDE_PATH= $MYMPI/include  \\\n    -DMPI_CXX_INCLUDE_PATH= $MYMPI/include  \\\n    -DMPI_C_COMPILER= $MYMPI/bin/mpicc  \\\n    -DMPI_CXX_COMPILER= $MYMPI/bin/mpicxx  \\\n    -DMPIEXEC= $MYMPI/bin/mpiexec  \\\n    -DPARAVIEW_BUILD_PLUGIN_GMVReader=OFF \\\n    -DPARAVIEW_BUILD_PLUGIN_ForceTime=ON \\\n    -DPARAVIEW_BUILD_PLUGIN_TemporalParallelismScriptGenerator=ON \\\n    -DPARAVIEW_BUILD_CATALYST_ADAPTORS=ON \\\n    -DPARAVIEW_ENABLE_PYTHON=ON \\\n    -DPYTHON_INCLUDE_DIR=/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 \\\n    -DPYTHON_EXECUTABLE=/usr/bin/python \\\n    ../ParaView/  If you wanted to build so that ParaView uses OpenGL2 (faster, but buggy), then add  -DVTK_RENDERING_BACKEND=OpenGL2 \\ .   Note that  -DBUILD_TESTING  is set to  OFF . Turning it on will cause the build to download a large number of small files from Kitware. Turning it off makes the build much faster and you can build without a network connection.  Now build and install,  make -j 4\nmake install  And it's done.", 
            "title": "Building ParaView"
        }, 
        {
            "location": "/misc/pvospray/", 
            "text": "pvOSPRay\n\n\n(Adam Lyon, October 2015, ParaView 4.4)\n\n\npvOSPRay\n is a ParaView plugin that uses the Intel OSPRay ray tracing framework. See \nhttp://tacc.github.io/pvOSPRay/index.html\n. OSPRay is supposed to be a performant and enhanced volume rendering system. It seems to make very pretty pictures. Let's try it!\n\n\nBuilding\n\n\nSee \ntheir instructions\n for reference to build from source. We will follow them in this section here to build it ourselves. \n\n\nWe need to download and build \nOSPRay\n first. See OSPray build \ninstructions\n for reference. We will be using the same build infrastructure we made in our \nParaView build instructions\n. So go to your \n/path/to/development/paraview\n directory where you have \nParaView\n, \nMPI\n, and \ncmake\n ready to go and that the \nMYBASE\n and \nMYMPI\n environment variables are set as per those instructions. You do not need to have ParaView built, just checked out. MPI should be built and installed. You also need to have Qt installed on your system. \n\n\nGet the OSPray source (note that we're changing their instructions a little to make building pvOSPRay easier),\n\n\ncd $MYBASE\ngit clone https://github.com/ospray/ospray.git OSPRay\ngit checkout devel  # Need latest from devel branch (tried on 2015-Oct-29)\n\n\n\n\nWe need the \nIntel SPMD compiler\n (ISPC). We'll \nget\n the Mac binary (not the AVX-512 variant - as far as I know the Mac CPU doesn't support that set of advanced vector extensions - though there is a Mac version of the code). \n\n\nThe download is from Sourceforge, so hard to script. Just download it and move it to the right place. Or this \ndirect link\n may work. Unpack the tar file in a sibling directory to OSPray. That is \n/path/to/development/paraview\n so that you have \n/path/to/development/paraview/ispc-v1.8.2-osx\n (or the directory appropriate for your platform and desired version). \n\n\nNow follow the build instructions,\n\n\ncd $MYBASE\ncd OSPRay\nmkdir build\ncd build\n../../cmake-3.4.0-rc1-Darwin-x86_64/CMake.app/Contents/bin/cmake \\\n   -DCMAKE_BUILD_TYPE=Release \\\n   -DOSPRAY_BUILD_MPI_DEVICE=ON \\\n   -DMPI_C_LIBRARIES=\n$MYMPI/lib/libmpi.dylib;$MYMPI/lib/libmpi_cxx.dylib\n \\\n   -DMPI_C_INCLUDE_PATH=\n$MYMPI/include\n \\\n   -DMPI_CXX_INCLUDE_PATH=\n$MYMPI/include\n \\\n   -DMPI_C_COMPILER=\n$MYMPI/bin/mpicc\n \\\n   -DMPI_CXX_COMPILER=\n$MYMPI/bin/mpicxx\n \\\n   -DMPIEXEC=\n$MYMPI/bin/mpiexec\n \\\n   ..\nmake -j 4\n# We won't make install\n\n\n\n\nTry playing with some of the \nexamples\n. \n\n\nNow we go back to \npvOSPRay\n installation.  We apparently alter some of the ParaView source.\n\n\ncd /path/to/development/paraview\ncd ParaView/Plugins\ngit clone https://github.com/TACC/pvOSPRay.git\ngit checkout 4.4   # Needed to correspond to ParaView 4.4\ncd ../../build\n# If there's stuff in build, delete everything there\n\n\n\n\nNow we run cmake as \ninstructed\n for building ParaView, but add the following to the list of flags (before the last line of the \ncmake\n command) \n\n\n    -DOSPRAY_BUILD_DIR=../OSPRay/build \\\n    -DPARAVIEW_BUILD_PLUGIN_pvOSPRay=ON  \\\n\n\n\n\nFollow the rest of the build steps.", 
            "title": "pvOSPRay"
        }, 
        {
            "location": "/misc/pvospray/#pvospray", 
            "text": "(Adam Lyon, October 2015, ParaView 4.4)  pvOSPRay  is a ParaView plugin that uses the Intel OSPRay ray tracing framework. See  http://tacc.github.io/pvOSPRay/index.html . OSPRay is supposed to be a performant and enhanced volume rendering system. It seems to make very pretty pictures. Let's try it!", 
            "title": "pvOSPRay"
        }, 
        {
            "location": "/misc/pvospray/#building", 
            "text": "See  their instructions  for reference to build from source. We will follow them in this section here to build it ourselves.   We need to download and build  OSPRay  first. See OSPray build  instructions  for reference. We will be using the same build infrastructure we made in our  ParaView build instructions . So go to your  /path/to/development/paraview  directory where you have  ParaView ,  MPI , and  cmake  ready to go and that the  MYBASE  and  MYMPI  environment variables are set as per those instructions. You do not need to have ParaView built, just checked out. MPI should be built and installed. You also need to have Qt installed on your system.   Get the OSPray source (note that we're changing their instructions a little to make building pvOSPRay easier),  cd $MYBASE\ngit clone https://github.com/ospray/ospray.git OSPRay\ngit checkout devel  # Need latest from devel branch (tried on 2015-Oct-29)  We need the  Intel SPMD compiler  (ISPC). We'll  get  the Mac binary (not the AVX-512 variant - as far as I know the Mac CPU doesn't support that set of advanced vector extensions - though there is a Mac version of the code).   The download is from Sourceforge, so hard to script. Just download it and move it to the right place. Or this  direct link  may work. Unpack the tar file in a sibling directory to OSPray. That is  /path/to/development/paraview  so that you have  /path/to/development/paraview/ispc-v1.8.2-osx  (or the directory appropriate for your platform and desired version).   Now follow the build instructions,  cd $MYBASE\ncd OSPRay\nmkdir build\ncd build\n../../cmake-3.4.0-rc1-Darwin-x86_64/CMake.app/Contents/bin/cmake \\\n   -DCMAKE_BUILD_TYPE=Release \\\n   -DOSPRAY_BUILD_MPI_DEVICE=ON \\\n   -DMPI_C_LIBRARIES= $MYMPI/lib/libmpi.dylib;$MYMPI/lib/libmpi_cxx.dylib  \\\n   -DMPI_C_INCLUDE_PATH= $MYMPI/include  \\\n   -DMPI_CXX_INCLUDE_PATH= $MYMPI/include  \\\n   -DMPI_C_COMPILER= $MYMPI/bin/mpicc  \\\n   -DMPI_CXX_COMPILER= $MYMPI/bin/mpicxx  \\\n   -DMPIEXEC= $MYMPI/bin/mpiexec  \\\n   ..\nmake -j 4\n# We won't make install  Try playing with some of the  examples .   Now we go back to  pvOSPRay  installation.  We apparently alter some of the ParaView source.  cd /path/to/development/paraview\ncd ParaView/Plugins\ngit clone https://github.com/TACC/pvOSPRay.git\ngit checkout 4.4   # Needed to correspond to ParaView 4.4\ncd ../../build\n# If there's stuff in build, delete everything there  Now we run cmake as  instructed  for building ParaView, but add the following to the list of flags (before the last line of the  cmake  command)       -DOSPRAY_BUILD_DIR=../OSPRay/build \\\n    -DPARAVIEW_BUILD_PLUGIN_pvOSPRay=ON  \\  Follow the rest of the build steps.", 
            "title": "Building"
        }, 
        {
            "location": "/about/license/", 
            "text": "License\n\n\nThis document/site is covered by the following license:\n\n\nFermilab Software Legal Information (BSD License)\nCopyright (c) 2009-2014, FERMI NATIONAL ACCELERATOR LABORATORY\nAll rights reserved.\n\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n\nNeither the name of the FERMI NATIONAL ACCELERATOR LABORATORY, nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            "title": "License"
        }, 
        {
            "location": "/about/license/#license", 
            "text": "This document/site is covered by the following license:  Fermilab Software Legal Information (BSD License)\nCopyright (c) 2009-2014, FERMI NATIONAL ACCELERATOR LABORATORY\nAll rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  Neither the name of the FERMI NATIONAL ACCELERATOR LABORATORY, nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            "title": "License"
        }
    ]
}